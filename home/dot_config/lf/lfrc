# vim:ft=bash:

##########################################
# options
##########################################
# '-e' is used to exit on error
# '-u' is used to give error for unset variables.
# '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shell bash
set shellopts '-eu'
# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"
# List of information shown for directory items at the right side of pane.
# Currently supported information types are 'size', 'time', 'atime', and 'ctime'.
# Information is only shown when the pane width is more than twice the width of information.
set info 'size:time'
#set infotimefmtnew 'Jan _2 15:04'
#set infotimefmtold 'Jan _2  2006'

set icons
#set drawbox
set mouse
set scrolloff 10
set tabstop 4
set incsearch
set truncatechar 'â†’'
#set number
#set relativenumber
set dircounts
#set dirpreviews
set previewer ~/.config/lf/previewer
#set cleaner ~/.config/lf/cleaner

# Any option that is prefixed with 'user_' is a user defined option and can be set to any string.
# Inside a user defined command the value will be provided in the `lf_user_{option}` environment variable.
# These options are not used by lf and are not persisted.
#set user_{option} string

##########################################
# commands
##########################################
# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type -Lb $f) in
        text/*|inode/x-empty|application/json|application/x-yaml|application/toml) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# # define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/N]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}
#
cmd trash %{{
    set -f
    printf "Trash $fx ? [y/N]"
    read ans
    if [[ $ans == "y" ]]; then
        trash-put $fx && printf "Trash success" || printf "Trash failed"
    else
        printf "Trash canceled"
    fi
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# Copy the file names (including extension) of the selections separated by \n
cmd copy-filename ${{
  names="$(echo $fx | tr ' ' '\n' | xargs -I{} basename {})"
  echo $names | tr ' ' '\n' | xsel -ib
}}

# Copy the absolute paths of selections separated by \n
cmd copy-path ${{
  echo $fx | tr ' ' '\n' | xsel -ib
}}

cmd select-all :unselect; invert

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        # *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        # *.tar.gz|*.tgz) tar xzvf $f;;
        # *.tar.xz|*.txz) tar xJvf $f;;
        # *.zip) unzip $f;;
        # *.rar) unrar x $f;;
        # *.7z) 7z x $f;;
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2|*.tar.gz|*.tar.tgz|*.tar.xz|*.tar.txz\
            |*.zip|*.rar|*.7z) unar $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

########################################## select the file or directory via fzf
map <c-f> $lf -remote "send $id select '$(fd --hidden --follow --exclude .git --exclude .DS_Store | fzf)'"
# cd into the selected dir via fzf
map <c-z> $lf -remote "send $id cd '$(fd --type d --hidden --follow --exclude .git | fzf)'"#
# mappings
##########################################
# remove some default keymaps
map za
map zh
map zn
map zr
map zs
map zt
map c # clear

map <esc> :clear; unselect
map <space> toggle
map <tab> :toggle; down
map <enter> shell
map o $$OPENER $f
map O $$OPENER --ask $f
map x trash $f
map X delete $f
#map X !$f # execute file
map a :push !nvim<space>
map A push :mkdir<space>

map c copy-filename
map C copy-path
map <c-a> select-all


# select the file or directory via fzf
map <c-f> $lf -remote "send $id select '$(fd --hidden --follow --exclude .git --exclude .DS_Store | fzf)'"
# cd into the selected dir via fzf
map <c-t> $lf -remote "send $id cd '$(fd --type d --hidden --follow --exclude .git | fzf)'"
# page preview
map i $LESSOPEN='| ~/.config/lf/previewer %s' less -R $f

# togglers
map \\i set info size:time
map \\I set info
map \\r set reverse!
map \\h set hidden!
map . set hidden!
map H set hidden!

map zx extract
map zz push :zip<space>
map zt push :tar<space>

# fast go to
map gc cd ~/.config
map gv cd ~/.config/nvim
map gd cd ~/Downloads
map gD cd ~/Documents

